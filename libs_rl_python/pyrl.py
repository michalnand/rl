# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_pyrl')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_pyrl')
    _pyrl = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyrl', [dirname(__file__)])
        except ImportError:
            import _pyrl
            return _pyrl
        try:
            _mod = imp.load_module('_pyrl', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _pyrl = swig_import_helper()
    del swig_import_helper
else:
    import _pyrl
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyrl.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _pyrl.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _pyrl.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _pyrl.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _pyrl.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _pyrl.SwigPyIterator_equal(self, x)

    def copy(self):
        return _pyrl.SwigPyIterator_copy(self)

    def next(self):
        return _pyrl.SwigPyIterator_next(self)

    def __next__(self):
        return _pyrl.SwigPyIterator___next__(self)

    def previous(self):
        return _pyrl.SwigPyIterator_previous(self)

    def advance(self, n):
        return _pyrl.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _pyrl.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _pyrl.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _pyrl.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _pyrl.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _pyrl.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _pyrl.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _pyrl.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class VectorChar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorChar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorChar, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pyrl.VectorChar_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyrl.VectorChar___nonzero__(self)

    def __bool__(self):
        return _pyrl.VectorChar___bool__(self)

    def __len__(self):
        return _pyrl.VectorChar___len__(self)

    def __getslice__(self, i, j):
        return _pyrl.VectorChar___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyrl.VectorChar___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyrl.VectorChar___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyrl.VectorChar___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyrl.VectorChar___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyrl.VectorChar___setitem__(self, *args)

    def pop(self):
        return _pyrl.VectorChar_pop(self)

    def append(self, x):
        return _pyrl.VectorChar_append(self, x)

    def empty(self):
        return _pyrl.VectorChar_empty(self)

    def size(self):
        return _pyrl.VectorChar_size(self)

    def swap(self, v):
        return _pyrl.VectorChar_swap(self, v)

    def begin(self):
        return _pyrl.VectorChar_begin(self)

    def end(self):
        return _pyrl.VectorChar_end(self)

    def rbegin(self):
        return _pyrl.VectorChar_rbegin(self)

    def rend(self):
        return _pyrl.VectorChar_rend(self)

    def clear(self):
        return _pyrl.VectorChar_clear(self)

    def get_allocator(self):
        return _pyrl.VectorChar_get_allocator(self)

    def pop_back(self):
        return _pyrl.VectorChar_pop_back(self)

    def erase(self, *args):
        return _pyrl.VectorChar_erase(self, *args)

    def __init__(self, *args):
        this = _pyrl.new_VectorChar(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pyrl.VectorChar_push_back(self, x)

    def front(self):
        return _pyrl.VectorChar_front(self)

    def back(self):
        return _pyrl.VectorChar_back(self)

    def assign(self, n, x):
        return _pyrl.VectorChar_assign(self, n, x)

    def resize(self, *args):
        return _pyrl.VectorChar_resize(self, *args)

    def insert(self, *args):
        return _pyrl.VectorChar_insert(self, *args)

    def reserve(self, n):
        return _pyrl.VectorChar_reserve(self, n)

    def capacity(self):
        return _pyrl.VectorChar_capacity(self)
    __swig_destroy__ = _pyrl.delete_VectorChar
    __del__ = lambda self: None
VectorChar_swigregister = _pyrl.VectorChar_swigregister
VectorChar_swigregister(VectorChar)

class VectorUnsignedChar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorUnsignedChar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorUnsignedChar, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pyrl.VectorUnsignedChar_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyrl.VectorUnsignedChar___nonzero__(self)

    def __bool__(self):
        return _pyrl.VectorUnsignedChar___bool__(self)

    def __len__(self):
        return _pyrl.VectorUnsignedChar___len__(self)

    def __getslice__(self, i, j):
        return _pyrl.VectorUnsignedChar___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyrl.VectorUnsignedChar___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyrl.VectorUnsignedChar___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyrl.VectorUnsignedChar___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyrl.VectorUnsignedChar___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyrl.VectorUnsignedChar___setitem__(self, *args)

    def pop(self):
        return _pyrl.VectorUnsignedChar_pop(self)

    def append(self, x):
        return _pyrl.VectorUnsignedChar_append(self, x)

    def empty(self):
        return _pyrl.VectorUnsignedChar_empty(self)

    def size(self):
        return _pyrl.VectorUnsignedChar_size(self)

    def swap(self, v):
        return _pyrl.VectorUnsignedChar_swap(self, v)

    def begin(self):
        return _pyrl.VectorUnsignedChar_begin(self)

    def end(self):
        return _pyrl.VectorUnsignedChar_end(self)

    def rbegin(self):
        return _pyrl.VectorUnsignedChar_rbegin(self)

    def rend(self):
        return _pyrl.VectorUnsignedChar_rend(self)

    def clear(self):
        return _pyrl.VectorUnsignedChar_clear(self)

    def get_allocator(self):
        return _pyrl.VectorUnsignedChar_get_allocator(self)

    def pop_back(self):
        return _pyrl.VectorUnsignedChar_pop_back(self)

    def erase(self, *args):
        return _pyrl.VectorUnsignedChar_erase(self, *args)

    def __init__(self, *args):
        this = _pyrl.new_VectorUnsignedChar(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pyrl.VectorUnsignedChar_push_back(self, x)

    def front(self):
        return _pyrl.VectorUnsignedChar_front(self)

    def back(self):
        return _pyrl.VectorUnsignedChar_back(self)

    def assign(self, n, x):
        return _pyrl.VectorUnsignedChar_assign(self, n, x)

    def resize(self, *args):
        return _pyrl.VectorUnsignedChar_resize(self, *args)

    def insert(self, *args):
        return _pyrl.VectorUnsignedChar_insert(self, *args)

    def reserve(self, n):
        return _pyrl.VectorUnsignedChar_reserve(self, n)

    def capacity(self):
        return _pyrl.VectorUnsignedChar_capacity(self)
    __swig_destroy__ = _pyrl.delete_VectorUnsignedChar
    __del__ = lambda self: None
VectorUnsignedChar_swigregister = _pyrl.VectorUnsignedChar_swigregister
VectorUnsignedChar_swigregister(VectorUnsignedChar)

class VectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pyrl.VectorInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyrl.VectorInt___nonzero__(self)

    def __bool__(self):
        return _pyrl.VectorInt___bool__(self)

    def __len__(self):
        return _pyrl.VectorInt___len__(self)

    def __getslice__(self, i, j):
        return _pyrl.VectorInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyrl.VectorInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyrl.VectorInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyrl.VectorInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyrl.VectorInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyrl.VectorInt___setitem__(self, *args)

    def pop(self):
        return _pyrl.VectorInt_pop(self)

    def append(self, x):
        return _pyrl.VectorInt_append(self, x)

    def empty(self):
        return _pyrl.VectorInt_empty(self)

    def size(self):
        return _pyrl.VectorInt_size(self)

    def swap(self, v):
        return _pyrl.VectorInt_swap(self, v)

    def begin(self):
        return _pyrl.VectorInt_begin(self)

    def end(self):
        return _pyrl.VectorInt_end(self)

    def rbegin(self):
        return _pyrl.VectorInt_rbegin(self)

    def rend(self):
        return _pyrl.VectorInt_rend(self)

    def clear(self):
        return _pyrl.VectorInt_clear(self)

    def get_allocator(self):
        return _pyrl.VectorInt_get_allocator(self)

    def pop_back(self):
        return _pyrl.VectorInt_pop_back(self)

    def erase(self, *args):
        return _pyrl.VectorInt_erase(self, *args)

    def __init__(self, *args):
        this = _pyrl.new_VectorInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pyrl.VectorInt_push_back(self, x)

    def front(self):
        return _pyrl.VectorInt_front(self)

    def back(self):
        return _pyrl.VectorInt_back(self)

    def assign(self, n, x):
        return _pyrl.VectorInt_assign(self, n, x)

    def resize(self, *args):
        return _pyrl.VectorInt_resize(self, *args)

    def insert(self, *args):
        return _pyrl.VectorInt_insert(self, *args)

    def reserve(self, n):
        return _pyrl.VectorInt_reserve(self, n)

    def capacity(self):
        return _pyrl.VectorInt_capacity(self)
    __swig_destroy__ = _pyrl.delete_VectorInt
    __del__ = lambda self: None
VectorInt_swigregister = _pyrl.VectorInt_swigregister
VectorInt_swigregister(VectorInt)

class VectorUnsignedInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorUnsignedInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorUnsignedInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pyrl.VectorUnsignedInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyrl.VectorUnsignedInt___nonzero__(self)

    def __bool__(self):
        return _pyrl.VectorUnsignedInt___bool__(self)

    def __len__(self):
        return _pyrl.VectorUnsignedInt___len__(self)

    def __getslice__(self, i, j):
        return _pyrl.VectorUnsignedInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyrl.VectorUnsignedInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyrl.VectorUnsignedInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyrl.VectorUnsignedInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyrl.VectorUnsignedInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyrl.VectorUnsignedInt___setitem__(self, *args)

    def pop(self):
        return _pyrl.VectorUnsignedInt_pop(self)

    def append(self, x):
        return _pyrl.VectorUnsignedInt_append(self, x)

    def empty(self):
        return _pyrl.VectorUnsignedInt_empty(self)

    def size(self):
        return _pyrl.VectorUnsignedInt_size(self)

    def swap(self, v):
        return _pyrl.VectorUnsignedInt_swap(self, v)

    def begin(self):
        return _pyrl.VectorUnsignedInt_begin(self)

    def end(self):
        return _pyrl.VectorUnsignedInt_end(self)

    def rbegin(self):
        return _pyrl.VectorUnsignedInt_rbegin(self)

    def rend(self):
        return _pyrl.VectorUnsignedInt_rend(self)

    def clear(self):
        return _pyrl.VectorUnsignedInt_clear(self)

    def get_allocator(self):
        return _pyrl.VectorUnsignedInt_get_allocator(self)

    def pop_back(self):
        return _pyrl.VectorUnsignedInt_pop_back(self)

    def erase(self, *args):
        return _pyrl.VectorUnsignedInt_erase(self, *args)

    def __init__(self, *args):
        this = _pyrl.new_VectorUnsignedInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pyrl.VectorUnsignedInt_push_back(self, x)

    def front(self):
        return _pyrl.VectorUnsignedInt_front(self)

    def back(self):
        return _pyrl.VectorUnsignedInt_back(self)

    def assign(self, n, x):
        return _pyrl.VectorUnsignedInt_assign(self, n, x)

    def resize(self, *args):
        return _pyrl.VectorUnsignedInt_resize(self, *args)

    def insert(self, *args):
        return _pyrl.VectorUnsignedInt_insert(self, *args)

    def reserve(self, n):
        return _pyrl.VectorUnsignedInt_reserve(self, n)

    def capacity(self):
        return _pyrl.VectorUnsignedInt_capacity(self)
    __swig_destroy__ = _pyrl.delete_VectorUnsignedInt
    __del__ = lambda self: None
VectorUnsignedInt_swigregister = _pyrl.VectorUnsignedInt_swigregister
VectorUnsignedInt_swigregister(VectorUnsignedInt)

class VectorFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorFloat, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pyrl.VectorFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyrl.VectorFloat___nonzero__(self)

    def __bool__(self):
        return _pyrl.VectorFloat___bool__(self)

    def __len__(self):
        return _pyrl.VectorFloat___len__(self)

    def __getslice__(self, i, j):
        return _pyrl.VectorFloat___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyrl.VectorFloat___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyrl.VectorFloat___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyrl.VectorFloat___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyrl.VectorFloat___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyrl.VectorFloat___setitem__(self, *args)

    def pop(self):
        return _pyrl.VectorFloat_pop(self)

    def append(self, x):
        return _pyrl.VectorFloat_append(self, x)

    def empty(self):
        return _pyrl.VectorFloat_empty(self)

    def size(self):
        return _pyrl.VectorFloat_size(self)

    def swap(self, v):
        return _pyrl.VectorFloat_swap(self, v)

    def begin(self):
        return _pyrl.VectorFloat_begin(self)

    def end(self):
        return _pyrl.VectorFloat_end(self)

    def rbegin(self):
        return _pyrl.VectorFloat_rbegin(self)

    def rend(self):
        return _pyrl.VectorFloat_rend(self)

    def clear(self):
        return _pyrl.VectorFloat_clear(self)

    def get_allocator(self):
        return _pyrl.VectorFloat_get_allocator(self)

    def pop_back(self):
        return _pyrl.VectorFloat_pop_back(self)

    def erase(self, *args):
        return _pyrl.VectorFloat_erase(self, *args)

    def __init__(self, *args):
        this = _pyrl.new_VectorFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pyrl.VectorFloat_push_back(self, x)

    def front(self):
        return _pyrl.VectorFloat_front(self)

    def back(self):
        return _pyrl.VectorFloat_back(self)

    def assign(self, n, x):
        return _pyrl.VectorFloat_assign(self, n, x)

    def resize(self, *args):
        return _pyrl.VectorFloat_resize(self, *args)

    def insert(self, *args):
        return _pyrl.VectorFloat_insert(self, *args)

    def reserve(self, n):
        return _pyrl.VectorFloat_reserve(self, n)

    def capacity(self):
        return _pyrl.VectorFloat_capacity(self)
    __swig_destroy__ = _pyrl.delete_VectorFloat
    __del__ = lambda self: None
VectorFloat_swigregister = _pyrl.VectorFloat_swigregister
VectorFloat_swigregister(VectorFloat)

class VectorDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorDouble, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pyrl.VectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyrl.VectorDouble___nonzero__(self)

    def __bool__(self):
        return _pyrl.VectorDouble___bool__(self)

    def __len__(self):
        return _pyrl.VectorDouble___len__(self)

    def __getslice__(self, i, j):
        return _pyrl.VectorDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyrl.VectorDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyrl.VectorDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyrl.VectorDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyrl.VectorDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyrl.VectorDouble___setitem__(self, *args)

    def pop(self):
        return _pyrl.VectorDouble_pop(self)

    def append(self, x):
        return _pyrl.VectorDouble_append(self, x)

    def empty(self):
        return _pyrl.VectorDouble_empty(self)

    def size(self):
        return _pyrl.VectorDouble_size(self)

    def swap(self, v):
        return _pyrl.VectorDouble_swap(self, v)

    def begin(self):
        return _pyrl.VectorDouble_begin(self)

    def end(self):
        return _pyrl.VectorDouble_end(self)

    def rbegin(self):
        return _pyrl.VectorDouble_rbegin(self)

    def rend(self):
        return _pyrl.VectorDouble_rend(self)

    def clear(self):
        return _pyrl.VectorDouble_clear(self)

    def get_allocator(self):
        return _pyrl.VectorDouble_get_allocator(self)

    def pop_back(self):
        return _pyrl.VectorDouble_pop_back(self)

    def erase(self, *args):
        return _pyrl.VectorDouble_erase(self, *args)

    def __init__(self, *args):
        this = _pyrl.new_VectorDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pyrl.VectorDouble_push_back(self, x)

    def front(self):
        return _pyrl.VectorDouble_front(self)

    def back(self):
        return _pyrl.VectorDouble_back(self)

    def assign(self, n, x):
        return _pyrl.VectorDouble_assign(self, n, x)

    def resize(self, *args):
        return _pyrl.VectorDouble_resize(self, *args)

    def insert(self, *args):
        return _pyrl.VectorDouble_insert(self, *args)

    def reserve(self, n):
        return _pyrl.VectorDouble_reserve(self, n)

    def capacity(self):
        return _pyrl.VectorDouble_capacity(self)
    __swig_destroy__ = _pyrl.delete_VectorDouble
    __del__ = lambda self: None
VectorDouble_swigregister = _pyrl.VectorDouble_swigregister
VectorDouble_swigregister(VectorDouble)

class MatrixInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pyrl.MatrixInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyrl.MatrixInt___nonzero__(self)

    def __bool__(self):
        return _pyrl.MatrixInt___bool__(self)

    def __len__(self):
        return _pyrl.MatrixInt___len__(self)

    def __getslice__(self, i, j):
        return _pyrl.MatrixInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyrl.MatrixInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyrl.MatrixInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyrl.MatrixInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyrl.MatrixInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyrl.MatrixInt___setitem__(self, *args)

    def pop(self):
        return _pyrl.MatrixInt_pop(self)

    def append(self, x):
        return _pyrl.MatrixInt_append(self, x)

    def empty(self):
        return _pyrl.MatrixInt_empty(self)

    def size(self):
        return _pyrl.MatrixInt_size(self)

    def swap(self, v):
        return _pyrl.MatrixInt_swap(self, v)

    def begin(self):
        return _pyrl.MatrixInt_begin(self)

    def end(self):
        return _pyrl.MatrixInt_end(self)

    def rbegin(self):
        return _pyrl.MatrixInt_rbegin(self)

    def rend(self):
        return _pyrl.MatrixInt_rend(self)

    def clear(self):
        return _pyrl.MatrixInt_clear(self)

    def get_allocator(self):
        return _pyrl.MatrixInt_get_allocator(self)

    def pop_back(self):
        return _pyrl.MatrixInt_pop_back(self)

    def erase(self, *args):
        return _pyrl.MatrixInt_erase(self, *args)

    def __init__(self, *args):
        this = _pyrl.new_MatrixInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pyrl.MatrixInt_push_back(self, x)

    def front(self):
        return _pyrl.MatrixInt_front(self)

    def back(self):
        return _pyrl.MatrixInt_back(self)

    def assign(self, n, x):
        return _pyrl.MatrixInt_assign(self, n, x)

    def resize(self, *args):
        return _pyrl.MatrixInt_resize(self, *args)

    def insert(self, *args):
        return _pyrl.MatrixInt_insert(self, *args)

    def reserve(self, n):
        return _pyrl.MatrixInt_reserve(self, n)

    def capacity(self):
        return _pyrl.MatrixInt_capacity(self)
    __swig_destroy__ = _pyrl.delete_MatrixInt
    __del__ = lambda self: None
MatrixInt_swigregister = _pyrl.MatrixInt_swigregister
MatrixInt_swigregister(MatrixInt)

class MatrixUnsignedInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixUnsignedInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixUnsignedInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pyrl.MatrixUnsignedInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyrl.MatrixUnsignedInt___nonzero__(self)

    def __bool__(self):
        return _pyrl.MatrixUnsignedInt___bool__(self)

    def __len__(self):
        return _pyrl.MatrixUnsignedInt___len__(self)

    def __getslice__(self, i, j):
        return _pyrl.MatrixUnsignedInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyrl.MatrixUnsignedInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyrl.MatrixUnsignedInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyrl.MatrixUnsignedInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyrl.MatrixUnsignedInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyrl.MatrixUnsignedInt___setitem__(self, *args)

    def pop(self):
        return _pyrl.MatrixUnsignedInt_pop(self)

    def append(self, x):
        return _pyrl.MatrixUnsignedInt_append(self, x)

    def empty(self):
        return _pyrl.MatrixUnsignedInt_empty(self)

    def size(self):
        return _pyrl.MatrixUnsignedInt_size(self)

    def swap(self, v):
        return _pyrl.MatrixUnsignedInt_swap(self, v)

    def begin(self):
        return _pyrl.MatrixUnsignedInt_begin(self)

    def end(self):
        return _pyrl.MatrixUnsignedInt_end(self)

    def rbegin(self):
        return _pyrl.MatrixUnsignedInt_rbegin(self)

    def rend(self):
        return _pyrl.MatrixUnsignedInt_rend(self)

    def clear(self):
        return _pyrl.MatrixUnsignedInt_clear(self)

    def get_allocator(self):
        return _pyrl.MatrixUnsignedInt_get_allocator(self)

    def pop_back(self):
        return _pyrl.MatrixUnsignedInt_pop_back(self)

    def erase(self, *args):
        return _pyrl.MatrixUnsignedInt_erase(self, *args)

    def __init__(self, *args):
        this = _pyrl.new_MatrixUnsignedInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pyrl.MatrixUnsignedInt_push_back(self, x)

    def front(self):
        return _pyrl.MatrixUnsignedInt_front(self)

    def back(self):
        return _pyrl.MatrixUnsignedInt_back(self)

    def assign(self, n, x):
        return _pyrl.MatrixUnsignedInt_assign(self, n, x)

    def resize(self, *args):
        return _pyrl.MatrixUnsignedInt_resize(self, *args)

    def insert(self, *args):
        return _pyrl.MatrixUnsignedInt_insert(self, *args)

    def reserve(self, n):
        return _pyrl.MatrixUnsignedInt_reserve(self, n)

    def capacity(self):
        return _pyrl.MatrixUnsignedInt_capacity(self)
    __swig_destroy__ = _pyrl.delete_MatrixUnsignedInt
    __del__ = lambda self: None
MatrixUnsignedInt_swigregister = _pyrl.MatrixUnsignedInt_swigregister
MatrixUnsignedInt_swigregister(MatrixUnsignedInt)

class MatrixFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixFloat, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pyrl.MatrixFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyrl.MatrixFloat___nonzero__(self)

    def __bool__(self):
        return _pyrl.MatrixFloat___bool__(self)

    def __len__(self):
        return _pyrl.MatrixFloat___len__(self)

    def __getslice__(self, i, j):
        return _pyrl.MatrixFloat___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyrl.MatrixFloat___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyrl.MatrixFloat___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyrl.MatrixFloat___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyrl.MatrixFloat___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyrl.MatrixFloat___setitem__(self, *args)

    def pop(self):
        return _pyrl.MatrixFloat_pop(self)

    def append(self, x):
        return _pyrl.MatrixFloat_append(self, x)

    def empty(self):
        return _pyrl.MatrixFloat_empty(self)

    def size(self):
        return _pyrl.MatrixFloat_size(self)

    def swap(self, v):
        return _pyrl.MatrixFloat_swap(self, v)

    def begin(self):
        return _pyrl.MatrixFloat_begin(self)

    def end(self):
        return _pyrl.MatrixFloat_end(self)

    def rbegin(self):
        return _pyrl.MatrixFloat_rbegin(self)

    def rend(self):
        return _pyrl.MatrixFloat_rend(self)

    def clear(self):
        return _pyrl.MatrixFloat_clear(self)

    def get_allocator(self):
        return _pyrl.MatrixFloat_get_allocator(self)

    def pop_back(self):
        return _pyrl.MatrixFloat_pop_back(self)

    def erase(self, *args):
        return _pyrl.MatrixFloat_erase(self, *args)

    def __init__(self, *args):
        this = _pyrl.new_MatrixFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pyrl.MatrixFloat_push_back(self, x)

    def front(self):
        return _pyrl.MatrixFloat_front(self)

    def back(self):
        return _pyrl.MatrixFloat_back(self)

    def assign(self, n, x):
        return _pyrl.MatrixFloat_assign(self, n, x)

    def resize(self, *args):
        return _pyrl.MatrixFloat_resize(self, *args)

    def insert(self, *args):
        return _pyrl.MatrixFloat_insert(self, *args)

    def reserve(self, n):
        return _pyrl.MatrixFloat_reserve(self, n)

    def capacity(self):
        return _pyrl.MatrixFloat_capacity(self)
    __swig_destroy__ = _pyrl.delete_MatrixFloat
    __del__ = lambda self: None
MatrixFloat_swigregister = _pyrl.MatrixFloat_swigregister
MatrixFloat_swigregister(MatrixFloat)

class MatrixDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixDouble, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pyrl.MatrixDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyrl.MatrixDouble___nonzero__(self)

    def __bool__(self):
        return _pyrl.MatrixDouble___bool__(self)

    def __len__(self):
        return _pyrl.MatrixDouble___len__(self)

    def __getslice__(self, i, j):
        return _pyrl.MatrixDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyrl.MatrixDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyrl.MatrixDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyrl.MatrixDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyrl.MatrixDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyrl.MatrixDouble___setitem__(self, *args)

    def pop(self):
        return _pyrl.MatrixDouble_pop(self)

    def append(self, x):
        return _pyrl.MatrixDouble_append(self, x)

    def empty(self):
        return _pyrl.MatrixDouble_empty(self)

    def size(self):
        return _pyrl.MatrixDouble_size(self)

    def swap(self, v):
        return _pyrl.MatrixDouble_swap(self, v)

    def begin(self):
        return _pyrl.MatrixDouble_begin(self)

    def end(self):
        return _pyrl.MatrixDouble_end(self)

    def rbegin(self):
        return _pyrl.MatrixDouble_rbegin(self)

    def rend(self):
        return _pyrl.MatrixDouble_rend(self)

    def clear(self):
        return _pyrl.MatrixDouble_clear(self)

    def get_allocator(self):
        return _pyrl.MatrixDouble_get_allocator(self)

    def pop_back(self):
        return _pyrl.MatrixDouble_pop_back(self)

    def erase(self, *args):
        return _pyrl.MatrixDouble_erase(self, *args)

    def __init__(self, *args):
        this = _pyrl.new_MatrixDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pyrl.MatrixDouble_push_back(self, x)

    def front(self):
        return _pyrl.MatrixDouble_front(self)

    def back(self):
        return _pyrl.MatrixDouble_back(self)

    def assign(self, n, x):
        return _pyrl.MatrixDouble_assign(self, n, x)

    def resize(self, *args):
        return _pyrl.MatrixDouble_resize(self, *args)

    def insert(self, *args):
        return _pyrl.MatrixDouble_insert(self, *args)

    def reserve(self, n):
        return _pyrl.MatrixDouble_reserve(self, n)

    def capacity(self):
        return _pyrl.MatrixDouble_capacity(self)
    __swig_destroy__ = _pyrl.delete_MatrixDouble
    __del__ = lambda self: None
MatrixDouble_swigregister = _pyrl.MatrixDouble_swigregister
MatrixDouble_swigregister(MatrixDouble)

class sDatasetItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sDatasetItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sDatasetItem, name)
    __repr__ = _swig_repr
    __swig_setmethods__["input"] = _pyrl.sDatasetItem_input_set
    __swig_getmethods__["input"] = _pyrl.sDatasetItem_input_get
    if _newclass:
        input = _swig_property(_pyrl.sDatasetItem_input_get, _pyrl.sDatasetItem_input_set)
    __swig_setmethods__["output"] = _pyrl.sDatasetItem_output_set
    __swig_getmethods__["output"] = _pyrl.sDatasetItem_output_get
    if _newclass:
        output = _swig_property(_pyrl.sDatasetItem_output_get, _pyrl.sDatasetItem_output_set)

    def __init__(self):
        this = _pyrl.new_sDatasetItem()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyrl.delete_sDatasetItem
    __del__ = lambda self: None
sDatasetItem_swigregister = _pyrl.sDatasetItem_swigregister
sDatasetItem_swigregister(sDatasetItem)

class DatasetInterface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatasetInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DatasetInterface, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pyrl.new_DatasetInterface()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyrl.delete_DatasetInterface
    __del__ = lambda self: None

    def _print(self):
        return _pyrl.DatasetInterface__print(self)

    def get_random_training(self):
        return _pyrl.DatasetInterface_get_random_training(self)

    def get_training(self, class_idx, idx):
        return _pyrl.DatasetInterface_get_training(self, class_idx, idx)

    def get_class_items_count(self, class_idx):
        return _pyrl.DatasetInterface_get_class_items_count(self, class_idx)

    def get_testing(self, idx):
        return _pyrl.DatasetInterface_get_testing(self, idx)

    def get_random_testing(self):
        return _pyrl.DatasetInterface_get_random_testing(self)

    def get_unlabeled(self, idx):
        return _pyrl.DatasetInterface_get_unlabeled(self, idx)

    def get_random_unlabeled(self):
        return _pyrl.DatasetInterface_get_random_unlabeled(self)

    def get_training_size(self):
        return _pyrl.DatasetInterface_get_training_size(self)

    def get_testing_size(self):
        return _pyrl.DatasetInterface_get_testing_size(self)

    def get_unlabeled_size(self):
        return _pyrl.DatasetInterface_get_unlabeled_size(self)

    def get_input_size(self):
        return _pyrl.DatasetInterface_get_input_size(self)

    def get_output_size(self):
        return _pyrl.DatasetInterface_get_output_size(self)

    def get_width(self):
        return _pyrl.DatasetInterface_get_width(self)

    def get_height(self):
        return _pyrl.DatasetInterface_get_height(self)

    def get_channels(self):
        return _pyrl.DatasetInterface_get_channels(self)

    def print_testing_item(self, idx):
        return _pyrl.DatasetInterface_print_testing_item(self, idx)

    def export_h_testing(self, file_name, count):
        return _pyrl.DatasetInterface_export_h_testing(self, file_name, count)

    def save_to_json(self, file_name):
        return _pyrl.DatasetInterface_save_to_json(self, file_name)

    def save_to_txt_training(self, file_name):
        return _pyrl.DatasetInterface_save_to_txt_training(self, file_name)

    def save_to_txt_testing(self, file_name):
        return _pyrl.DatasetInterface_save_to_txt_testing(self, file_name)

    def save_to_binary(self, training_file_name, testing_file_name, unlabeled_file_name):
        return _pyrl.DatasetInterface_save_to_binary(self, training_file_name, testing_file_name, unlabeled_file_name)

    def save_images(self, training_file_name_prefix, testing_file_name_prefix):
        return _pyrl.DatasetInterface_save_images(self, training_file_name_prefix, testing_file_name_prefix)
DatasetInterface_swigregister = _pyrl.DatasetInterface_swigregister
DatasetInterface_swigregister(DatasetInterface)

class DatasetCIFAR(DatasetInterface):
    __swig_setmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatasetCIFAR, name, value)
    __swig_getmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DatasetCIFAR, name)
    __repr__ = _swig_repr

    def __init__(self, training_batch_file_name, testing_batch_file_name, load_fine=False, padding=0):
        this = _pyrl.new_DatasetCIFAR(training_batch_file_name, testing_batch_file_name, load_fine, padding)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyrl.delete_DatasetCIFAR
    __del__ = lambda self: None
DatasetCIFAR_swigregister = _pyrl.DatasetCIFAR_swigregister
DatasetCIFAR_swigregister(DatasetCIFAR)

class DatasetCIFAR10(DatasetInterface):
    __swig_setmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatasetCIFAR10, name, value)
    __swig_getmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DatasetCIFAR10, name)
    __repr__ = _swig_repr

    def __init__(self, training_batch_1_file_name, training_batch_2_file_name, training_batch_3_file_name, training_batch_4_file_name, training_batch_5_file_name, testing_batch_file_name, padding=0):
        this = _pyrl.new_DatasetCIFAR10(training_batch_1_file_name, training_batch_2_file_name, training_batch_3_file_name, training_batch_4_file_name, training_batch_5_file_name, testing_batch_file_name, padding)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyrl.delete_DatasetCIFAR10
    __del__ = lambda self: None
DatasetCIFAR10_swigregister = _pyrl.DatasetCIFAR10_swigregister
DatasetCIFAR10_swigregister(DatasetCIFAR10)

class DatasetImages(DatasetInterface):
    __swig_setmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatasetImages, name, value)
    __swig_getmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DatasetImages, name)
    __repr__ = _swig_repr

    def __init__(self, json_config_file_name):
        this = _pyrl.new_DatasetImages(json_config_file_name)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyrl.delete_DatasetImages
    __del__ = lambda self: None
DatasetImages_swigregister = _pyrl.DatasetImages_swigregister
DatasetImages_swigregister(DatasetImages)

class DatasetLANDSAT(DatasetInterface):
    __swig_setmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatasetLANDSAT, name, value)
    __swig_getmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DatasetLANDSAT, name)
    __repr__ = _swig_repr

    def __init__(self, training_data_file_name, testing_data_file_name, padding):
        this = _pyrl.new_DatasetLANDSAT(training_data_file_name, testing_data_file_name, padding)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyrl.delete_DatasetLANDSAT
    __del__ = lambda self: None
DatasetLANDSAT_swigregister = _pyrl.DatasetLANDSAT_swigregister
DatasetLANDSAT_swigregister(DatasetLANDSAT)

class DatasetMnist(DatasetInterface):
    __swig_setmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatasetMnist, name, value)
    __swig_getmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DatasetMnist, name)
    __repr__ = _swig_repr

    def __init__(self, training_data_file_name, training_labels_file_name, testing_data_file_name, testing_labels_file_name, padding=0):
        this = _pyrl.new_DatasetMnist(training_data_file_name, training_labels_file_name, testing_data_file_name, testing_labels_file_name, padding)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyrl.delete_DatasetMnist
    __del__ = lambda self: None
DatasetMnist_swigregister = _pyrl.DatasetMnist_swigregister
DatasetMnist_swigregister(DatasetMnist)

class DatasetMnistTiny(DatasetInterface):
    __swig_setmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatasetMnistTiny, name, value)
    __swig_getmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DatasetMnistTiny, name)
    __repr__ = _swig_repr

    def __init__(self, training_data_file_name, testing_data_file_name, padding=0):
        this = _pyrl.new_DatasetMnistTiny(training_data_file_name, testing_data_file_name, padding)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyrl.delete_DatasetMnistTiny
    __del__ = lambda self: None
DatasetMnistTiny_swigregister = _pyrl.DatasetMnistTiny_swigregister
DatasetMnistTiny_swigregister(DatasetMnistTiny)

class DatasetPair(DatasetInterface):
    __swig_setmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatasetPair, name, value)
    __swig_getmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DatasetPair, name)
    __repr__ = _swig_repr

    def __init__(self, dataset, training_size_=-1, testing_size_=-1):
        this = _pyrl.new_DatasetPair(dataset, training_size_, testing_size_)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyrl.delete_DatasetPair
    __del__ = lambda self: None
DatasetPair_swigregister = _pyrl.DatasetPair_swigregister
DatasetPair_swigregister(DatasetPair)

class DatasetPreprocessing(DatasetInterface):
    __swig_setmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatasetPreprocessing, name, value)
    __swig_getmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DatasetPreprocessing, name)
    __repr__ = _swig_repr

    def __init__(self, dataset, config_file_name):
        this = _pyrl.new_DatasetPreprocessing(dataset, config_file_name)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyrl.delete_DatasetPreprocessing
    __del__ = lambda self: None
DatasetPreprocessing_swigregister = _pyrl.DatasetPreprocessing_swigregister
DatasetPreprocessing_swigregister(DatasetPreprocessing)

class DatasetTicTacToe(DatasetInterface):
    __swig_setmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatasetTicTacToe, name, value)
    __swig_getmethods__ = {}
    for _s in [DatasetInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DatasetTicTacToe, name)
    __repr__ = _swig_repr

    def __init__(self, data_file_name, testing_ratio=0.5, padding=0):
        this = _pyrl.new_DatasetTicTacToe(data_file_name, testing_ratio, padding)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyrl.delete_DatasetTicTacToe
    __del__ = lambda self: None
DatasetTicTacToe_swigregister = _pyrl.DatasetTicTacToe_swigregister
DatasetTicTacToe_swigregister(DatasetTicTacToe)

class CNN(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CNN, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CNN, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyrl.new_CNN(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyrl.delete_CNN
    __del__ = lambda self: None

    def forward(self, *args):
        return _pyrl.CNN_forward(self, *args)

    def train_single_output(self, *args):
        return _pyrl.CNN_train_single_output(self, *args)

    def train(self, *args):
        return _pyrl.CNN_train(self, *args)

    def set_training_mode(self):
        return _pyrl.CNN_set_training_mode(self)

    def unset_training_mode(self):
        return _pyrl.CNN_unset_training_mode(self)

    def reset_state(self):
        return _pyrl.CNN_reset_state(self)

    def set_learning_rate(self, learning_rate):
        return _pyrl.CNN_set_learning_rate(self, learning_rate)

    def set_lambda1(self, arg2):
        return _pyrl.CNN_set_lambda1(self, arg2)

    def set_lambda2(self, arg2):
        return _pyrl.CNN_set_lambda2(self, arg2)

    def get_learning_rate(self):
        return _pyrl.CNN_get_learning_rate(self)

    def get_lambda1(self):
        return _pyrl.CNN_get_lambda1(self)

    def get_lambda2(self):
        return _pyrl.CNN_get_lambda2(self)

    def save(self, file_name_prefix):
        return _pyrl.CNN_save(self, file_name_prefix)

    def load_weights(self, file_name_prefix):
        return _pyrl.CNN_load_weights(self, file_name_prefix)
CNN_swigregister = _pyrl.CNN_swigregister
CNN_swigregister(CNN)

class sHistogramItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sHistogramItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sHistogramItem, name)
    __repr__ = _swig_repr
    __swig_setmethods__["count"] = _pyrl.sHistogramItem_count_set
    __swig_getmethods__["count"] = _pyrl.sHistogramItem_count_get
    if _newclass:
        count = _swig_property(_pyrl.sHistogramItem_count_get, _pyrl.sHistogramItem_count_set)
    __swig_setmethods__["normalised_count"] = _pyrl.sHistogramItem_normalised_count_set
    __swig_getmethods__["normalised_count"] = _pyrl.sHistogramItem_normalised_count_get
    if _newclass:
        normalised_count = _swig_property(_pyrl.sHistogramItem_normalised_count_get, _pyrl.sHistogramItem_normalised_count_set)
    __swig_setmethods__["value"] = _pyrl.sHistogramItem_value_set
    __swig_getmethods__["value"] = _pyrl.sHistogramItem_value_get
    if _newclass:
        value = _swig_property(_pyrl.sHistogramItem_value_get, _pyrl.sHistogramItem_value_set)

    def __init__(self):
        this = _pyrl.new_sHistogramItem()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyrl.delete_sHistogramItem
    __del__ = lambda self: None
sHistogramItem_swigregister = _pyrl.sHistogramItem_swigregister
sHistogramItem_swigregister(sHistogramItem)

class Histogram(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Histogram, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Histogram, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pyrl.new_Histogram()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyrl.delete_Histogram
    __del__ = lambda self: None

    def add(self, value):
        return _pyrl.Histogram_add(self, value)

    def clear(self):
        return _pyrl.Histogram_clear(self)

    def compute(self, count=201):
        return _pyrl.Histogram_compute(self, count)

    def get_count(self):
        return _pyrl.Histogram_get_count(self)

    def get(self, *args):
        return _pyrl.Histogram_get(self, *args)

    def asString(self):
        return _pyrl.Histogram_asString(self)

    def _print(self):
        return _pyrl.Histogram__print(self)

    def save(self, file_name):
        return _pyrl.Histogram_save(self, file_name)

    def get_max(self):
        return _pyrl.Histogram_get_max(self)

    def get_min(self):
        return _pyrl.Histogram_get_min(self)

    def get_average(self):
        return _pyrl.Histogram_get_average(self)
Histogram_swigregister = _pyrl.Histogram_swigregister
Histogram_swigregister(Histogram)

class ClassificationCompare(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClassificationCompare, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ClassificationCompare, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyrl.new_ClassificationCompare(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyrl.delete_ClassificationCompare
    __del__ = lambda self: None

    def compare(self, required_value, output_value):
        return _pyrl.ClassificationCompare_compare(self, required_value, output_value)

    def set_classes_count(self, classes_count):
        return _pyrl.ClassificationCompare_set_classes_count(self, classes_count)

    def set_top_n_count(self, top_n_count_):
        return _pyrl.ClassificationCompare_set_top_n_count(self, top_n_count_)

    def clear(self):
        return _pyrl.ClassificationCompare_clear(self)

    def process(self, percent_result):
        return _pyrl.ClassificationCompare_process(self, percent_result)

    def get_success(self):
        return _pyrl.ClassificationCompare_get_success(self)

    def get_summary_result(self):
        return _pyrl.ClassificationCompare_get_summary_result(self)

    def get_text_result(self):
        return _pyrl.ClassificationCompare_get_text_result(self)

    def get_json_result(self):
        return _pyrl.ClassificationCompare_get_json_result(self)

    def save_text_file(self, file_name):
        return _pyrl.ClassificationCompare_save_text_file(self, file_name)

    def save_json_file(self, file_name):
        return _pyrl.ClassificationCompare_save_json_file(self, file_name)

    def get_confusion_matrix(self):
        return _pyrl.ClassificationCompare_get_confusion_matrix(self)

    def get_class_success_rate(self):
        return _pyrl.ClassificationCompare_get_class_success_rate(self)

    def get_classes_count(self):
        return _pyrl.ClassificationCompare_get_classes_count(self)
ClassificationCompare_swigregister = _pyrl.ClassificationCompare_swigregister
ClassificationCompare_swigregister(ClassificationCompare)

class RegressionCompare(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegressionCompare, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RegressionCompare, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyrl.new_RegressionCompare(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyrl.delete_RegressionCompare
    __del__ = lambda self: None

    def clear(self):
        return _pyrl.RegressionCompare_clear(self)

    def set_output_size(self, output_size):
        return _pyrl.RegressionCompare_set_output_size(self, output_size)

    def compare(self, required_value, output_value):
        return _pyrl.RegressionCompare_compare(self, required_value, output_value)

    def process(self, fixed_bars_count=-1):
        return _pyrl.RegressionCompare_process(self, fixed_bars_count)

    def get_error_average_squared(self):
        return _pyrl.RegressionCompare_get_error_average_squared(self)

    def get_error_min_squared(self):
        return _pyrl.RegressionCompare_get_error_min_squared(self)

    def get_error_max_squared(self):
        return _pyrl.RegressionCompare_get_error_max_squared(self)

    def save_text_file(self, log_file_name_prefix):
        return _pyrl.RegressionCompare_save_text_file(self, log_file_name_prefix)

    def save_json_file(self, json_file_name):
        return _pyrl.RegressionCompare_save_json_file(self, json_file_name)

    def process_json_result(self):
        return _pyrl.RegressionCompare_process_json_result(self)
RegressionCompare_swigregister = _pyrl.RegressionCompare_swigregister
RegressionCompare_swigregister(RegressionCompare)

class ClassificationExperiment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClassificationExperiment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ClassificationExperiment, name)
    __repr__ = _swig_repr

    def __init__(self, dataset, config_dir):
        this = _pyrl.new_ClassificationExperiment(dataset, config_dir)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyrl.delete_ClassificationExperiment
    __del__ = lambda self: None

    def run(self):
        return _pyrl.ClassificationExperiment_run(self)
ClassificationExperiment_swigregister = _pyrl.ClassificationExperiment_swigregister
ClassificationExperiment_swigregister(ClassificationExperiment)

class RegressionExperiment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegressionExperiment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RegressionExperiment, name)
    __repr__ = _swig_repr

    def __init__(self, dataset, config_dir):
        this = _pyrl.new_RegressionExperiment(dataset, config_dir)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyrl.delete_RegressionExperiment
    __del__ = lambda self: None

    def run(self):
        return _pyrl.RegressionExperiment_run(self)
RegressionExperiment_swigregister = _pyrl.RegressionExperiment_swigregister
RegressionExperiment_swigregister(RegressionExperiment)

class AutoencoderExperiment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AutoencoderExperiment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AutoencoderExperiment, name)
    __repr__ = _swig_repr

    def __init__(self, dataset, config_dir):
        this = _pyrl.new_AutoencoderExperiment(dataset, config_dir)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyrl.delete_AutoencoderExperiment
    __del__ = lambda self: None

    def run(self):
        return _pyrl.AutoencoderExperiment_run(self)
AutoencoderExperiment_swigregister = _pyrl.AutoencoderExperiment_swigregister
AutoencoderExperiment_swigregister(AutoencoderExperiment)

class DQN(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DQN, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DQN, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyrl.new_DQN(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyrl.delete_DQN
    __del__ = lambda self: None

    def init(self, json_config, gamma, state_geometry, actions_count, experience_buffer_size):
        return _pyrl.DQN_init(self, json_config, gamma, state_geometry, actions_count, experience_buffer_size)

    def compute_q_values(self, state):
        return _pyrl.DQN_compute_q_values(self, state)

    def learn(self):
        return _pyrl.DQN_learn(self)

    def test(self):
        return _pyrl.DQN_test(self)

    def new_batch(self):
        return _pyrl.DQN_new_batch(self)

    def is_full(self):
        return _pyrl.DQN_is_full(self)
DQN_swigregister = _pyrl.DQN_swigregister
DQN_swigregister(DQN)

class DDQN(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DDQN, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DDQN, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyrl.new_DDQN(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyrl.delete_DDQN
    __del__ = lambda self: None

    def init(self, json_config, gamma, state_geometry, actions_count, experience_buffer_size):
        return _pyrl.DDQN_init(self, json_config, gamma, state_geometry, actions_count, experience_buffer_size)

    def compute_q_values(self, state):
        return _pyrl.DDQN_compute_q_values(self, state)

    def learn(self):
        return _pyrl.DDQN_learn(self)

    def test(self):
        return _pyrl.DDQN_test(self)

    def new_batch(self):
        return _pyrl.DDQN_new_batch(self)

    def is_full(self):
        return _pyrl.DDQN_is_full(self)
DDQN_swigregister = _pyrl.DDQN_swigregister
DDQN_swigregister(DDQN)

class DQNCompare(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DQNCompare, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DQNCompare, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyrl.new_DQNCompare(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyrl.delete_DQNCompare
    __del__ = lambda self: None

    def clear(self):
        return _pyrl.DQNCompare_clear(self)

    def set_output_size(self, output_size):
        return _pyrl.DQNCompare_set_output_size(self, output_size)

    def compare(self, target_value, output_value, action):
        return _pyrl.DQNCompare_compare(self, target_value, output_value, action)

    def process(self, fixed_bars_count=-1):
        return _pyrl.DQNCompare_process(self, fixed_bars_count)

    def get_error_average_squared(self):
        return _pyrl.DQNCompare_get_error_average_squared(self)

    def get_error_min_squared(self):
        return _pyrl.DQNCompare_get_error_min_squared(self)

    def get_error_max_squared(self):
        return _pyrl.DQNCompare_get_error_max_squared(self)

    def save_text_file(self, log_file_name_prefix):
        return _pyrl.DQNCompare_save_text_file(self, log_file_name_prefix)

    def save_json_file(self, json_file_name):
        return _pyrl.DQNCompare_save_json_file(self, json_file_name)

    def process_json_result(self):
        return _pyrl.DQNCompare_process_json_result(self)
DQNCompare_swigregister = _pyrl.DQNCompare_swigregister
DQNCompare_swigregister(DQNCompare)

class DQNP(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DQNP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DQNP, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyrl.new_DQNP(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyrl.delete_DQNP
    __del__ = lambda self: None

    def init(self, json_config, gamma, state_geometry, actions_count, experience_buffer_size):
        return _pyrl.DQNP_init(self, json_config, gamma, state_geometry, actions_count, experience_buffer_size)

    def compute_q_values(self, state):
        return _pyrl.DQNP_compute_q_values(self, state)

    def learn(self):
        return _pyrl.DQNP_learn(self)

    def test(self):
        return _pyrl.DQNP_test(self)

    def new_batch(self):
        return _pyrl.DQNP_new_batch(self)

    def is_full(self):
        return _pyrl.DQNP_is_full(self)
DQNP_swigregister = _pyrl.DQNP_swigregister
DQNP_swigregister(DQNP)

class RandomDistribution(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RandomDistribution, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RandomDistribution, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyrl.new_RandomDistribution(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyrl.delete_RandomDistribution
    __del__ = lambda self: None

    def set(self, p_, count=-1):
        return _pyrl.RandomDistribution_set(self, p_, count)

    def get(self):
        return _pyrl.RandomDistribution_get(self)
RandomDistribution_swigregister = _pyrl.RandomDistribution_swigregister
RandomDistribution_swigregister(RandomDistribution)

class sAgentHyperparameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sAgentHyperparameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sAgentHyperparameters, name)
    __repr__ = _swig_repr
    __swig_setmethods__["alpha"] = _pyrl.sAgentHyperparameters_alpha_set
    __swig_getmethods__["alpha"] = _pyrl.sAgentHyperparameters_alpha_get
    if _newclass:
        alpha = _swig_property(_pyrl.sAgentHyperparameters_alpha_get, _pyrl.sAgentHyperparameters_alpha_set)
    __swig_setmethods__["gamma"] = _pyrl.sAgentHyperparameters_gamma_set
    __swig_getmethods__["gamma"] = _pyrl.sAgentHyperparameters_gamma_get
    if _newclass:
        gamma = _swig_property(_pyrl.sAgentHyperparameters_gamma_get, _pyrl.sAgentHyperparameters_gamma_set)
    __swig_setmethods__["epsilon"] = _pyrl.sAgentHyperparameters_epsilon_set
    __swig_getmethods__["epsilon"] = _pyrl.sAgentHyperparameters_epsilon_get
    if _newclass:
        epsilon = _swig_property(_pyrl.sAgentHyperparameters_epsilon_get, _pyrl.sAgentHyperparameters_epsilon_set)
    __swig_setmethods__["epsilon_best"] = _pyrl.sAgentHyperparameters_epsilon_best_set
    __swig_getmethods__["epsilon_best"] = _pyrl.sAgentHyperparameters_epsilon_best_get
    if _newclass:
        epsilon_best = _swig_property(_pyrl.sAgentHyperparameters_epsilon_best_get, _pyrl.sAgentHyperparameters_epsilon_best_set)

    def __init__(self):
        this = _pyrl.new_sAgentHyperparameters()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyrl.delete_sAgentHyperparameters
    __del__ = lambda self: None
sAgentHyperparameters_swigregister = _pyrl.sAgentHyperparameters_swigregister
sAgentHyperparameters_swigregister(sAgentHyperparameters)

class State(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, State, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, State, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyrl.new_State(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyrl.delete_State
    __del__ = lambda self: None

    def init(self, w, h=1, d=1):
        return _pyrl.State_init(self, w, h, d)

    def get(self):
        return _pyrl.State_get(self)

    def set(self, state):
        return _pyrl.State_set(self, state)

    def set_element(self, value, w, h=0, d=0):
        return _pyrl.State_set_element(self, value, w, h, d)

    def get_element(self, w, h=0, d=0):
        return _pyrl.State_get_element(self, w, h, d)

    def clear(self):
        return _pyrl.State_clear(self)

    def is_terminal(self):
        return _pyrl.State_is_terminal(self)

    def set_terminal(self):
        return _pyrl.State_set_terminal(self)

    def set_no_terminal(self):
        return _pyrl.State_set_no_terminal(self)

    def as_string(self, precision=3):
        return _pyrl.State_as_string(self, precision)

    def _print(self, precision=3):
        return _pyrl.State__print(self, precision)

    def is_valid(self):
        return _pyrl.State_is_valid(self)

    def random(self, range=1.0):
        return _pyrl.State_random(self, range)

    def add_noise(self, level):
        return _pyrl.State_add_noise(self, level)

    def argmax(self):
        return _pyrl.State_argmax(self)

    def argmin(self):
        return _pyrl.State_argmin(self)

    def dot(self, other):
        return _pyrl.State_dot(self, other)

    def distance(self, other):
        return _pyrl.State_distance(self, other)

    def normalise(self):
        return _pyrl.State_normalise(self)

    def w(self):
        return _pyrl.State_w(self)

    def h(self):
        return _pyrl.State_h(self)

    def d(self):
        return _pyrl.State_d(self)

    def size(self):
        return _pyrl.State_size(self)
State_swigregister = _pyrl.State_swigregister
State_swigregister(State)

class Agent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Agent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Agent, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyrl.new_Agent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyrl.delete_Agent
    __del__ = lambda self: None

    def init(self, *args):
        return _pyrl.Agent_init(self, *args)

    def main(self):
        return _pyrl.Agent_main(self)

    def select_action(self, q_values):
        return _pyrl.Agent_select_action(self, q_values)

    def max(self, v):
        return _pyrl.Agent_max(self, v)

    def run_best_enable(self):
        return _pyrl.Agent_run_best_enable(self)

    def run_best_disable(self):
        return _pyrl.Agent_run_best_disable(self)

    def run_best_enabled(self):
        return _pyrl.Agent_run_best_enabled(self)

    def set_epsilon(self, epsilon):
        return _pyrl.Agent_set_epsilon(self, epsilon)
Agent_swigregister = _pyrl.Agent_swigregister
Agent_swigregister(Agent)

class AgentDDQN(Agent):
    __swig_setmethods__ = {}
    for _s in [Agent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AgentDDQN, name, value)
    __swig_getmethods__ = {}
    for _s in [Agent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AgentDDQN, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyrl.new_AgentDDQN(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyrl.delete_AgentDDQN
    __del__ = lambda self: None

    def init(self, *args):
        return _pyrl.AgentDDQN_init(self, *args)

    def main(self):
        return _pyrl.AgentDDQN_main(self)
AgentDDQN_swigregister = _pyrl.AgentDDQN_swigregister
AgentDDQN_swigregister(AgentDDQN)

class AgentDQN(Agent):
    __swig_setmethods__ = {}
    for _s in [Agent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AgentDQN, name, value)
    __swig_getmethods__ = {}
    for _s in [Agent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AgentDQN, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyrl.new_AgentDQN(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyrl.delete_AgentDQN
    __del__ = lambda self: None

    def init(self, *args):
        return _pyrl.AgentDQN_init(self, *args)

    def main(self):
        return _pyrl.AgentDQN_main(self)
AgentDQN_swigregister = _pyrl.AgentDQN_swigregister
AgentDQN_swigregister(AgentDQN)

class AgentDQNP(Agent):
    __swig_setmethods__ = {}
    for _s in [Agent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AgentDQNP, name, value)
    __swig_getmethods__ = {}
    for _s in [Agent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AgentDQNP, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyrl.new_AgentDQNP(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyrl.delete_AgentDQNP
    __del__ = lambda self: None

    def init(self, *args):
        return _pyrl.AgentDQNP_init(self, *args)

    def main(self):
        return _pyrl.AgentDQNP_main(self)
AgentDQNP_swigregister = _pyrl.AgentDQNP_swigregister
AgentDQNP_swigregister(AgentDQNP)

class AgentQTable(Agent):
    __swig_setmethods__ = {}
    for _s in [Agent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AgentQTable, name, value)
    __swig_getmethods__ = {}
    for _s in [Agent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AgentQTable, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyrl.new_AgentQTable(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyrl.delete_AgentQTable
    __del__ = lambda self: None

    def init(self, *args):
        return _pyrl.AgentQTable_init(self, *args)

    def main(self):
        return _pyrl.AgentQTable_main(self)
AgentQTable_swigregister = _pyrl.AgentQTable_swigregister
AgentQTable_swigregister(AgentQTable)

class AgentSarsaTable(Agent):
    __swig_setmethods__ = {}
    for _s in [Agent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AgentSarsaTable, name, value)
    __swig_getmethods__ = {}
    for _s in [Agent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AgentSarsaTable, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyrl.new_AgentSarsaTable(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyrl.delete_AgentSarsaTable
    __del__ = lambda self: None

    def init(self, *args):
        return _pyrl.AgentSarsaTable_init(self, *args)

    def main(self):
        return _pyrl.AgentSarsaTable_main(self)
AgentSarsaTable_swigregister = _pyrl.AgentSarsaTable_swigregister
AgentSarsaTable_swigregister(AgentSarsaTable)

class Env(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Env, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Env, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyrl.new_Env(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyrl.delete_Env
    __del__ = lambda self: None

    def get_observation(self):
        return _pyrl.Env_get_observation(self)

    def get_actions_count(self):
        return _pyrl.Env_get_actions_count(self)

    def is_done(self):
        return _pyrl.Env_is_done(self)

    def reward(self):
        return _pyrl.Env_reward(self)

    def score(self):
        return _pyrl.Env_score(self)

    def reset_score(self):
        return _pyrl.Env_reset_score(self)

    def iteration(self):
        return _pyrl.Env_iteration(self)

    def epoch(self):
        return _pyrl.Env_epoch(self)

    def delay_ms(self, ms_time):
        return _pyrl.Env_delay_ms(self, ms_time)

    def action(self, action_id):
        return _pyrl.Env_action(self, action_id)

    def save(self, path):
        return _pyrl.Env_save(self, path)

    def load(self, path):
        return _pyrl.Env_load(self, path)

    def _print(self):
        return _pyrl.Env__print(self)

    def render(self):
        return _pyrl.Env_render(self)

    def monitor(self):
        return _pyrl.Env_monitor(self)

    def get_key(self):
        return _pyrl.Env_get_key(self)

    def get_state(self):
        return _pyrl.Env_get_state(self)

    def set_actions_count(self, actions_count):
        return _pyrl.Env_set_actions_count(self, actions_count)

    def get_reward(self):
        return _pyrl.Env_get_reward(self)

    def set_reward(self, reward):
        return _pyrl.Env_set_reward(self, reward)

    def get_score(self):
        return _pyrl.Env_get_score(self)

    def set_score(self, score):
        return _pyrl.Env_set_score(self, score)

    def get_done(self):
        return _pyrl.Env_get_done(self)

    def set_done(self, done):
        return _pyrl.Env_set_done(self, done)
Env_swigregister = _pyrl.Env_swigregister
Env_swigregister(Env)

class BlackBoxState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlackBoxState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BlackBoxState, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyrl.new_BlackBoxState(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyrl.delete_BlackBoxState
    __del__ = lambda self: None

    def reward(self):
        return _pyrl.BlackBoxState_reward(self)

    def x(self):
        return _pyrl.BlackBoxState_x(self)

    def y(self):
        return _pyrl.BlackBoxState_y(self)

    def max(self):
        return _pyrl.BlackBoxState_max(self)

    def min(self):
        return _pyrl.BlackBoxState_min(self)

    def state(self):
        return _pyrl.BlackBoxState_state(self)

    def transition(self):
        return _pyrl.BlackBoxState_transition(self)

    def set_transition(self, *args):
        return _pyrl.BlackBoxState_set_transition(self, *args)

    def save_image_state(self, file_name):
        return _pyrl.BlackBoxState_save_image_state(self, file_name)

    def normalise(self, min, max):
        return _pyrl.BlackBoxState_normalise(self, min, max)

    def create_reward(self):
        return _pyrl.BlackBoxState_create_reward(self)
BlackBoxState_swigregister = _pyrl.BlackBoxState_swigregister
BlackBoxState_swigregister(BlackBoxState)

class PerlinNoise(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PerlinNoise, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PerlinNoise, name)
    __repr__ = _swig_repr

    def __init__(self, amp_decay=0.9, octaves=16, seed=0):
        this = _pyrl.new_PerlinNoise(amp_decay, octaves, seed)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyrl.delete_PerlinNoise
    __del__ = lambda self: None

    def init(self, amp_decay=0.9, octaves=16, seed=0):
        return _pyrl.PerlinNoise_init(self, amp_decay, octaves, seed)

    def get(self, x, y):
        return _pyrl.PerlinNoise_get(self, x, y)
PerlinNoise_swigregister = _pyrl.PerlinNoise_swigregister
PerlinNoise_swigregister(PerlinNoise)

class EnvBlackBox(Env):
    __swig_setmethods__ = {}
    for _s in [Env]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnvBlackBox, name, value)
    __swig_getmethods__ = {}
    for _s in [Env]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EnvBlackBox, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyrl.new_EnvBlackBox(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyrl.delete_EnvBlackBox
    __del__ = lambda self: None

    def create(self, result_file_prefix, config_file_name):
        return _pyrl.EnvBlackBox_create(self, result_file_prefix, config_file_name)
EnvBlackBox_swigregister = _pyrl.EnvBlackBox_swigregister
EnvBlackBox_swigregister(EnvBlackBox)

class EnvCatcher(Env):
    __swig_setmethods__ = {}
    for _s in [Env]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnvCatcher, name, value)
    __swig_getmethods__ = {}
    for _s in [Env]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EnvCatcher, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyrl.new_EnvCatcher(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyrl.delete_EnvCatcher
    __del__ = lambda self: None

    def action(self, action_id):
        return _pyrl.EnvCatcher_action(self, action_id)

    def _print(self):
        return _pyrl.EnvCatcher__print(self)

    def render(self):
        return _pyrl.EnvCatcher_render(self)
EnvCatcher_swigregister = _pyrl.EnvCatcher_swigregister
EnvCatcher_swigregister(EnvCatcher)

class EnvCliff(Env):
    __swig_setmethods__ = {}
    for _s in [Env]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnvCliff, name, value)
    __swig_getmethods__ = {}
    for _s in [Env]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EnvCliff, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyrl.new_EnvCliff(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyrl.delete_EnvCliff
    __del__ = lambda self: None

    def action(self, action_id):
        return _pyrl.EnvCliff_action(self, action_id)

    def _print(self):
        return _pyrl.EnvCliff__print(self)

    def render(self):
        return _pyrl.EnvCliff_render(self)
EnvCliff_swigregister = _pyrl.EnvCliff_swigregister
EnvCliff_swigregister(EnvCliff)

class EnvFrozenLake(Env):
    __swig_setmethods__ = {}
    for _s in [Env]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnvFrozenLake, name, value)
    __swig_getmethods__ = {}
    for _s in [Env]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EnvFrozenLake, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyrl.new_EnvFrozenLake(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyrl.delete_EnvFrozenLake
    __del__ = lambda self: None

    def action(self, action_id):
        return _pyrl.EnvFrozenLake_action(self, action_id)

    def _print(self):
        return _pyrl.EnvFrozenLake__print(self)
EnvFrozenLake_swigregister = _pyrl.EnvFrozenLake_swigregister
EnvFrozenLake_swigregister(EnvFrozenLake)

class EnvPong(Env):
    __swig_setmethods__ = {}
    for _s in [Env]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnvPong, name, value)
    __swig_getmethods__ = {}
    for _s in [Env]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EnvPong, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyrl.new_EnvPong(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyrl.delete_EnvPong
    __del__ = lambda self: None

    def action(self, action_id):
        return _pyrl.EnvPong_action(self, action_id)

    def _print(self):
        return _pyrl.EnvPong__print(self)

    def render(self):
        return _pyrl.EnvPong_render(self)
EnvPong_swigregister = _pyrl.EnvPong_swigregister
EnvPong_swigregister(EnvPong)

PLAYER_STATE_INIT = _pyrl.PLAYER_STATE_INIT
PLAYER_STATE_JUMPING = _pyrl.PLAYER_STATE_JUMPING
PLAYER_STATE_FALLING = _pyrl.PLAYER_STATE_FALLING
class EnvArcade(Env):
    __swig_setmethods__ = {}
    for _s in [Env]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnvArcade, name, value)
    __swig_getmethods__ = {}
    for _s in [Env]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EnvArcade, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyrl.new_EnvArcade(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyrl.delete_EnvArcade
    __del__ = lambda self: None

    def action(self, action_id):
        return _pyrl.EnvArcade_action(self, action_id)

    def _print(self):
        return _pyrl.EnvArcade__print(self)

    def render(self):
        return _pyrl.EnvArcade_render(self)

    def update_state(self):
        return _pyrl.EnvArcade_update_state(self)
EnvArcade_swigregister = _pyrl.EnvArcade_swigregister
EnvArcade_swigregister(EnvArcade)

class EnvBallBalance(Env):
    __swig_setmethods__ = {}
    for _s in [Env]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnvBallBalance, name, value)
    __swig_getmethods__ = {}
    for _s in [Env]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EnvBallBalance, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyrl.new_EnvBallBalance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyrl.delete_EnvBallBalance
    __del__ = lambda self: None

    def action(self, action_id):
        return _pyrl.EnvBallBalance_action(self, action_id)

    def _print(self):
        return _pyrl.EnvBallBalance__print(self)

    def render(self):
        return _pyrl.EnvBallBalance_render(self)

    def get_key(self):
        return _pyrl.EnvBallBalance_get_key(self)
EnvBallBalance_swigregister = _pyrl.EnvBallBalance_swigregister
EnvBallBalance_swigregister(EnvBallBalance)

class sEnvPacManPosition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sEnvPacManPosition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sEnvPacManPosition, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _pyrl.sEnvPacManPosition_x_set
    __swig_getmethods__["x"] = _pyrl.sEnvPacManPosition_x_get
    if _newclass:
        x = _swig_property(_pyrl.sEnvPacManPosition_x_get, _pyrl.sEnvPacManPosition_x_set)
    __swig_setmethods__["y"] = _pyrl.sEnvPacManPosition_y_set
    __swig_getmethods__["y"] = _pyrl.sEnvPacManPosition_y_get
    if _newclass:
        y = _swig_property(_pyrl.sEnvPacManPosition_y_get, _pyrl.sEnvPacManPosition_y_set)

    def __init__(self):
        this = _pyrl.new_sEnvPacManPosition()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyrl.delete_sEnvPacManPosition
    __del__ = lambda self: None
sEnvPacManPosition_swigregister = _pyrl.sEnvPacManPosition_swigregister
sEnvPacManPosition_swigregister(sEnvPacManPosition)

class EnvPacman(Env):
    __swig_setmethods__ = {}
    for _s in [Env]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnvPacman, name, value)
    __swig_getmethods__ = {}
    for _s in [Env]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EnvPacman, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyrl.new_EnvPacman(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyrl.delete_EnvPacman
    __del__ = lambda self: None

    def action(self, action_id):
        return _pyrl.EnvPacman_action(self, action_id)

    def _print(self):
        return _pyrl.EnvPacman__print(self)

    def render(self):
        return _pyrl.EnvPacman_render(self)
EnvPacman_swigregister = _pyrl.EnvPacman_swigregister
EnvPacman_swigregister(EnvPacman)

class EnvSnake(Env):
    __swig_setmethods__ = {}
    for _s in [Env]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnvSnake, name, value)
    __swig_getmethods__ = {}
    for _s in [Env]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EnvSnake, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyrl.new_EnvSnake(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyrl.delete_EnvSnake
    __del__ = lambda self: None

    def action(self, action_id):
        return _pyrl.EnvSnake_action(self, action_id)

    def render(self):
        return _pyrl.EnvSnake_render(self)
EnvSnake_swigregister = _pyrl.EnvSnake_swigregister
EnvSnake_swigregister(EnvSnake)

class EnvStack(Env):
    __swig_setmethods__ = {}
    for _s in [Env]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnvStack, name, value)
    __swig_getmethods__ = {}
    for _s in [Env]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EnvStack, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyrl.new_EnvStack(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyrl.delete_EnvStack
    __del__ = lambda self: None

    def action(self, action_id):
        return _pyrl.EnvStack_action(self, action_id)

    def render(self):
        return _pyrl.EnvStack_render(self)

    def _print(self):
        return _pyrl.EnvStack__print(self)
EnvStack_swigregister = _pyrl.EnvStack_swigregister
EnvStack_swigregister(EnvStack)

class GLVisualisation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GLVisualisation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GLVisualisation, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pyrl.new_GLVisualisation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyrl.delete_GLVisualisation
    __del__ = lambda self: None

    def time(self):
        return _pyrl.GLVisualisation_time(self)

    def init(self, *args):
        return _pyrl.GLVisualisation_init(self, *args)

    def width(self):
        return _pyrl.GLVisualisation_width(self)

    def height(self):
        return _pyrl.GLVisualisation_height(self)

    def start(self):
        return _pyrl.GLVisualisation_start(self)

    def finish(self):
        return _pyrl.GLVisualisation_finish(self)

    def push(self):
        return _pyrl.GLVisualisation_push(self)

    def pop(self):
        return _pyrl.GLVisualisation_pop(self)

    def translate(self, x, y, z):
        return _pyrl.GLVisualisation_translate(self, x, y, z)

    def rotate(self, angle_x, angle_y, angle_z):
        return _pyrl.GLVisualisation_rotate(self, angle_x, angle_y, angle_z)

    def set_color(self, r, g, b):
        return _pyrl.GLVisualisation_set_color(self, r, g, b)

    def paint_point(self):
        return _pyrl.GLVisualisation_paint_point(self)

    def paint_square(self, size):
        return _pyrl.GLVisualisation_paint_square(self, size)

    def paint_rectangle(self, width, height):
        return _pyrl.GLVisualisation_paint_rectangle(self, width, height)

    def paint_textured_rectangle(self, width, height, texture_id):
        return _pyrl.GLVisualisation_paint_textured_rectangle(self, width, height, texture_id)

    def paint_line(self, x0, y0, z0, x1, y1, z1):
        return _pyrl.GLVisualisation_paint_line(self, x0, y0, z0, x1, y1, z1)

    def paint_quad(self, x0, y0, z0, r0, g0, b0, x1, y1, z1, r1, g1, b1, x2, y2, z2, r2, g2, b2, x3, y3, z3, r3, g3, b3):
        return _pyrl.GLVisualisation_paint_quad(self, x0, y0, z0, r0, g0, b0, x1, y1, z1, r1, g1, b1, x2, y2, z2, r2, g2, b2, x3, y3, z3, r3, g3, b3)

    def paint_cube(self, size):
        return _pyrl.GLVisualisation_paint_cube(self, size)

    def paint_cuboid(self, width, height, depth):
        return _pyrl.GLVisualisation_paint_cuboid(self, width, height, depth)

    def paint_circle(self, size, steps=12):
        return _pyrl.GLVisualisation_paint_circle(self, size, steps)

    def paint_sphere(self, size, steps=12):
        return _pyrl.GLVisualisation_paint_sphere(self, size, steps)

    def _print(self, x, y, z, string, small_font=False):
        return _pyrl.GLVisualisation__print(self, x, y, z, string, small_font)

    def get_key(self):
        return _pyrl.GLVisualisation_get_key(self)

    def get_texture(self, id):
        return _pyrl.GLVisualisation_get_texture(self, id)
GLVisualisation_swigregister = _pyrl.GLVisualisation_swigregister
GLVisualisation_swigregister(GLVisualisation)

class sRLScoreLogItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sRLScoreLogItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sRLScoreLogItem, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iteration"] = _pyrl.sRLScoreLogItem_iteration_set
    __swig_getmethods__["iteration"] = _pyrl.sRLScoreLogItem_iteration_get
    if _newclass:
        iteration = _swig_property(_pyrl.sRLScoreLogItem_iteration_get, _pyrl.sRLScoreLogItem_iteration_set)
    __swig_setmethods__["score"] = _pyrl.sRLScoreLogItem_score_set
    __swig_getmethods__["score"] = _pyrl.sRLScoreLogItem_score_get
    if _newclass:
        score = _swig_property(_pyrl.sRLScoreLogItem_score_get, _pyrl.sRLScoreLogItem_score_set)
    __swig_setmethods__["normalised_score"] = _pyrl.sRLScoreLogItem_normalised_score_set
    __swig_getmethods__["normalised_score"] = _pyrl.sRLScoreLogItem_normalised_score_get
    if _newclass:
        normalised_score = _swig_property(_pyrl.sRLScoreLogItem_normalised_score_get, _pyrl.sRLScoreLogItem_normalised_score_set)
    __swig_setmethods__["reward"] = _pyrl.sRLScoreLogItem_reward_set
    __swig_getmethods__["reward"] = _pyrl.sRLScoreLogItem_reward_get
    if _newclass:
        reward = _swig_property(_pyrl.sRLScoreLogItem_reward_get, _pyrl.sRLScoreLogItem_reward_set)

    def __init__(self):
        this = _pyrl.new_sRLScoreLogItem()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyrl.delete_sRLScoreLogItem
    __del__ = lambda self: None
sRLScoreLogItem_swigregister = _pyrl.sRLScoreLogItem_swigregister
sRLScoreLogItem_swigregister(sRLScoreLogItem)

class RLLog(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RLLog, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RLLog, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pyrl.new_RLLog()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyrl.delete_RLLog
    __del__ = lambda self: None

    def set_file_name_prefix(self, file_name_prefix):
        return _pyrl.RLLog_set_file_name_prefix(self, file_name_prefix)

    def add(self, env, agent, log_all=False):
        return _pyrl.RLLog_add(self, env, agent, log_all)

    def get_score_log(self):
        return _pyrl.RLLog_get_score_log(self)
RLLog_swigregister = _pyrl.RLLog_swigregister
RLLog_swigregister(RLLog)

class RLSummaryResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RLSummaryResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RLSummaryResult, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pyrl.new_RLSummaryResult()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyrl.delete_RLSummaryResult
    __del__ = lambda self: None

    def add(self, experiment_log):
        return _pyrl.RLSummaryResult_add(self, experiment_log)

    def compute(self):
        return _pyrl.RLSummaryResult_compute(self)

    def save(self, file_name_prefix):
        return _pyrl.RLSummaryResult_save(self, file_name_prefix)
RLSummaryResult_swigregister = _pyrl.RLSummaryResult_swigregister
RLSummaryResult_swigregister(RLSummaryResult)

class RLExperiment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RLExperiment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RLExperiment, name)
    __repr__ = _swig_repr

    def __init__(self, config_file_name):
        this = _pyrl.new_RLExperiment(config_file_name)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyrl.delete_RLExperiment
    __del__ = lambda self: None

    def run(self, env, agent):
        return _pyrl.RLExperiment_run(self, env, agent)

    def get_training_score_log(self):
        return _pyrl.RLExperiment_get_training_score_log(self)

    def get_testing_score_log(self):
        return _pyrl.RLExperiment_get_testing_score_log(self)
RLExperiment_swigregister = _pyrl.RLExperiment_swigregister
RLExperiment_swigregister(RLExperiment)

# This file is compatible with both classic and new-style classes.


